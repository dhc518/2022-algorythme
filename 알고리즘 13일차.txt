1장

알고리즘
  1. 문제를 해결하기 위한 단계적인 절차를 의미
  2. 보다 효율적인 알고리즘을 고려하는 것이 매우 중요
  
순차탐색
  하나 씩 다 찾아보는 방법
  오름차순으로 다 정렬 되어있다면 더 효율적인 방법이 될 것이다
  
이진탐색
  오름차순 정렬
  중간 숫자와 비교
  같으면 탐색 성공

동전 거스름 돈
  그리디 방식
    할 수 있을만큼 최대한 해서 푸는 법
  다이나믹 프로그래머 방식
  
한붓 그리기
  현재 점으로 돌아오는 사이클이 있으면 진행한다
    그전 까지 간 길 을 지우고 갈 수있는 길이 있으면 진행한다


미로찾기
  백트랙 방식
  한손 법칙: 벽이 섬처럼 되어있으면 사용 불가
    
저울
  동전 더미를 반으로 나누어 양편에 둔다
  동전을 세무더기로 나눠서 하면 더 빠르게 가짜동전을 찾을 수 있다

독이 든 술단지
  술단지 마다 숫자를 매기고 각 자릿수마다 신하를 배치한다(n개 의 술단지, log^2 n명의 신하)
  2진수를 활용
  
  
2장

수행성
  알고리즘은 주어진 입력에 대해 올바른 해를 주어야한다
정확성
효율성
유한성

유클리드의 최대공약수 알고리즘
  2개의 자여눗의 최대공약수는 큰 수에서 작은 수를 뺀 수와 작은 수와의 최대공약수와 같다.
  뺄셈대신에 나눗셈을 사용하면 더 빠르고 쉽게 만들 수 있다.
  
알고리즘의 표현 방법
  알고리즘의 형태는 단겨ㅖ별 절차이므로, 마치 요리책의 요리를 만드는 정차ㅎ롸 유사
  의사 코드(수도 코드)  
  보통말로 표현된 알고리즘(자연어)
  플로우 차트


문제해결 방식에 따른 분류
  분할정복
  동적계획
  근사
  백트래킹
  분기 한정
  그리디

알고리즘의 효율성 표현
 수행시간 또는 사용되는 메모리 크기
 시간 복잡도, 공간 복잡도
 시간복잡도가 주로 사용됨
 
등교시간 분석
  상각 분석

최악의 경우 분석
  상한의 의미
평균의 경우 분석
최선의 경우 분석

시간복잡도는 입력 크기에 대한 함수로 표기
  점근적 표기
    빅 오 표기
    빅 오메가 표기
    세타 표기 (실제 업계에서는 빅오라고 한다)
자주 사용하는 O-표기
  1 상수시간
  logn 로그 시간
  n 선형 시간
  nlogn 로그 선형 시간
  n^2 이차 시간
  n^3 3차 시간
  n^k 다항식 시간, k는 상수
  2^n 지수 시간 
  
내부정렬
  입력의 크기가 주기억 장치의 공간보다 크지 아농느 경우에 수행 되는 정렬
  버블정렬, 선택정렬, 삽입정렬, 합병정렬

외부정렬


버블정렬
  이웃하는 숫자를 비교하여 작은 수를 앞쪽으로 이동시키는 과정을 반복하여 정렬

선택정렬
  항상 일정한 시간 복잡도를 나타낸다
  입력에 민감하지 않은 알고리즘
  원소간의 자리바꿈 횟수가 최소인 정렬


삽입정렬
   거의 정렬된 입력에 대해소는 다른 정렬 알고리즘보다 ㅂ빠르다
   입력의 크기가 작을 때 매우 종른 성능
   퀵 정려르 합병 정렬에서 입력 크기가 작아지면 순환 호출을 중단하고 삽입 정렬을 사용
   Tim sort에서는 입력 크기가 64 이하이면 사용
 
 쉘정렬
  갭을 이용
  
이진 힙
  힙조건을 만족하는 완전 이진 트리
  

힙정렬
  정렬할 입ㅎ력으로 최대 힙을 만든다
   너무 많은 캐시 미스로 인해 페이지 부재
 
기수 정렬은 사용할 수 있는 데이터가 한정되어 있다.


3장
분할 정복

  합병정렬
    합병 과정에서 사용되는 메모리 공간이 필요하다
    외부정렬의 기본이 되는 아록리즘
    퀵소트 대비 스테이블 하다.
    
  퀵정렬
    정복 후 분할
    분할 하면서 생기는 피봇의 위지가 정해져있기 때문에 불할이 정복이다.
    피복 선정 방법
      램덤
      미디안 오브 쓰리: 세 숫자의 중앙값으로 선정
      미디안 오브 미디안
    피봇 값이 복잡하면 할 수록 n0값이 커진다.
    성능 항상 방법
      크기 작을때에는 삽입정렬을 이용
      
  이진탐색
  
  선택 문제 알고리즘
    램덤 알고리즘
    피복이 입력을 한쪽으로 치우치게 되면 오래걸린다
   
  삽입 문제 알고리즘
  피보나치
  
  최근접 점의 쌍 찾기
    가장 잛은 거리 이내의 중간 영역 안에 더 짧은 거리가 있는 지 찾아본다
    각 층의 수행시간 n
    층의 길이 logn
    
 취합과정에 신경써야한다.

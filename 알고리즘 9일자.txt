분할 정복
  합병정렬 
    입력이 2갸의 부분 문제로 분할되고 부분문제의 크기가 1/2 로 감소하는 분할정복 알고리즘
      n개의 숫자들을 n/2개씩 2개의 부분 문제로 분할
      각각의 부분 문제를 순환으로 합병정렬
      2개의 정렬된 부분을 합병하여 정렬(정복)
      1. 왼쪽을 합병정렬한다
      2. 오른쪽을 합뱡정렬한다
      3. 합병한다
     합병 과정이 무제를 정복하는 것     
     너무 적은 데이터 개수 에서는 삽입정렬등의 정렬들을 이용해서 정열을 한다.     
     데이터(n)만큼의 추가 메모리가 필요하다

  퀵 정렬
    과정을 보면 정복(취합) 후 분할하는 알고리즘.
    문제가 2개로 분활되되, 부분 문제의 크기가 일정하지 않은 크기로 감소하는 알고리즘
    피봇이라는 원소의 기준을 결정하여 원소가 작으면 왼쪽으로 크면 오른쪽으로 분할하여 정렬한다.
    1. 파티션 한다(피벗을 정해서 나눈다)
    2. 왼쪽 퀵소트
    3. 오른쪽 퀵소트
    시간 복잡도는 피봇을 어떻게 선택되느냐에 따라 민감하게 변화한다.
      최선의 경우 nlogn, 평균 nlogn, 최대 n^2
    피봇 선정 방법 : 데이터 크기가 크면 클수록 피봇 선정에 공을 들여야 한다.
      midian of three : 3개의 숫자중 중앙값을 피봇으로 설정 / 총 세개의 숫자 검사
      median of medians : 3등분한 후 각 부분에서 midian of three 한후 나온 세값들중 다시 median of three를 한다 / 총 9개의 숫자 검사
    성능 향상 방법
      입력의 크기가 매우 클때 퀵정렬의 성능을 더 향상시키기 위해 삽입 정렬을 동시에 사용.
    스테이블 하지는 않다.
    
     
    

이진탐색
  문제가 2개로 분할되나 그중에 1갸위 부분 문제는 고려할 필요가 없으며 부분문제의 크기가 1/2로 감소하는 알고리즘
  
삽입정렬, 피보나치 수의 계산
  부분 문제의 크기가 12개씩 감소하는 알고리즘
  
힙정렬
  캐시 미스가 많기 때문에 계수가 커서 nlogn 이지만 초반에는 n^1.5 보다 느리다.

외부정렬
  
  
